name: Build and Push Docker Image

on:
  push:
    #branches: [ "main" ]
    tags: ["v*.*.*"] # 更严格的语义化版本标签匹配
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.13" # 匹配pyproject.toml要求

jobs:
  build-and-push:
    name: Build and Push
    # 移除 needs: validate，因为我们已经注释掉了 validate job
    runs-on: ubuntu-latest
    # 添加 environment 字段以访问 Environment secrets
    environment: deploy-webhook
    permissions:
      contents: read
      packages: write
      id-token: write # 用于OIDC安全认证

    steps:
      - uses: actions/checkout@v4

      # 设置 QEMU 用于多架构构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            # 注意: org.opencontainers.image.created 可能引用了不存在的步骤 'prep'。如果需要，请修正或移除。
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

      - name: Trigger Deployment Webhook
        if: github.event_name != 'pull_request' && steps.build-push.outcome == 'success'
        env:
          DEPLOY_WEBHOOK_URL: ${{ secrets.DW }}
        run: |
          echo "Build and push successful. Triggering deployment webhook (GET)..."
          # 检查 URL 是否为空
          if [ -z "$DEPLOY_WEBHOOK_URL" ]; then
            echo "Error: DEPLOY_WEBHOOK_URL is empty. Check the 'DW' secret in the 'deploy-webhook' environment."
            exit 1
          fi
          curl -f -X GET "$DEPLOY_WEBHOOK_URL"
          echo "Deployment webhook triggered successfully."
